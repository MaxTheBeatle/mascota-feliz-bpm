#!/usr/bin/env python
"""
Script para crear datos exactos de la base de datos local del Sistema Veterinario Mascota Feliz
Replica exactamente los usuarios, productos, servicios y datos que ya tienes
"""

import os
import sys
import django
from decimal import Decimal
from datetime import datetime, timedelta

def setup_django():
    """Configurar Django"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mascota_feliz.settings')
    django.setup()

def crear_usuarios_reales():
    """Crear usuarios exactos de la base de datos local"""
    from veterinaria.models import User, Veterinario, Peluquero, Farmaceutico
    
    print("üë• Creando usuarios reales...")
    
    # Usuario admin
    if not User.objects.filter(username='admin').exists():
        admin = User.objects.create_superuser(
            username='admin',
            email='admin@mascotafeliz.com',
            password='admin123',
            first_name='',
            last_name='',
            region='Regi√≥n Metropolitana',
            phone=''
        )
        print("‚úÖ Admin creado")
    
    # Cliente de ejemplo
    if not User.objects.filter(username='cliente1').exists():
        User.objects.create_user(
            username='cliente1',
            email='cliente1@example.com',
            password='cliente123',
            first_name='',
            last_name='',
            region='Regi√≥n de Los Lagos',
            phone='+56912345678'
        )
        print("‚úÖ Cliente1 creado")
    
    # Veterinarios
    veterinarios_data = [
        ('dr_martinez', 'carlos.martinez@mascotafeliz.cl', 'Carlos', 'Mart√≠nez', 'Medicina General', '+56 9 1234 5678'),
        ('dra_rodriguez', 'maria.rodriguez@mascotafeliz.cl', 'Mar√≠a', 'Rodr√≠guez', 'Cirug√≠a Veterinaria', '+56 9 7654 3210'),
        ('dr_gonzalez', 'pedro.gonzalez@mascotafeliz.cl', 'Pedro', 'Gonz√°lez', 'Dermatolog√≠a Veterinaria', '+56 9 6543 2109'),
        ('dra_lopez', 'ana.lopez@mascotafeliz.cl', 'Ana', 'L√≥pez', 'Cardiolog√≠a Veterinaria', '+56 9 5432 1098'),
        ('dr_silva', 'roberto.silva@mascotafeliz.cl', 'Roberto', 'Silva', 'Medicina Felina', '+56 9 4321 0987'),
        ('veterinario1', 'veterinario@mascotafeliz.com', 'Carlos', 'Mendoza', 'Medicina General', '+56912345678')
    ]
    
    for username, email, first_name, last_name, especialidad, telefono in veterinarios_data:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username,
                email=email,
                password='vet123',
                first_name=first_name,
                last_name=last_name,
                is_staff=True if username == 'veterinario1' else False,
                region='Santiago' if username == 'veterinario1' else '',
                phone='+56912345678' if username == 'veterinario1' else ''
            )
            
            Veterinario.objects.create(
                user=user,
                especialidad=especialidad,
                telefono=telefono
            )
            print(f"‚úÖ Veterinario {username} creado")
    
    # Peluqueros
    peluqueros_data = [
        ('peluquero1', 'maria.gonzalez@mascotafeliz.com', 'Mar√≠a', 'Gonz√°lez', '+56 9 8765 4321', 8),
        ('peluquero2', 'carlos.rodriguez@mascotafeliz.com', 'Carlos', 'Rodr√≠guez', '+56 9 7654 3210', 5),
        ('peluquero3', 'ana.martinez@mascotafeliz.com', 'Ana', 'Mart√≠nez', '+56 9 6543 2109', 12)
    ]
    
    for username, email, first_name, last_name, telefono, experiencia in peluqueros_data:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username,
                email=email,
                password='peluquero123',
                first_name=first_name,
                last_name=last_name,
                region='',
                phone=''
            )
            
            Peluquero.objects.create(
                user=user,
                telefono=telefono,
                experiencia_a√±os=experiencia
            )
            print(f"‚úÖ Peluquero {username} creado")
    
    # Farmac√©utico
    if not User.objects.filter(username='farmaceutico1').exists():
        farm_user = User.objects.create_user(
            username='farmaceutico1',
            email='farmaceutico@mascotafeliz.com',
            password='farm123',
            first_name='Mar√≠a',
            last_name='Gonz√°lez',
            region='Santiago',
            phone='+56987654321'
        )
        
        Farmaceutico.objects.create(
            user=farm_user,
            telefono='+56987654321',
            numero_registro='FARM001',
            especialidad='Farmacia General',
            experiencia_a√±os=5
        )
        print("‚úÖ Farmac√©utico creado")

def crear_categorias_reales():
    """Crear categor√≠as exactas"""
    from veterinaria.models import Categoria, CategoriaServicioPeluqueria, CategoriaFarmacia
    
    print("üìÇ Creando categor√≠as...")
    
    # Categor√≠as de productos
    categorias_productos = [
        ('Comida para perros', 'Alimentos especializados para perros'),
        ('Juguetes', 'Juguetes y entretenimiento para mascotas'),
        ('Cuidado', 'Productos de cuidado e higiene'),
        ('Accesorios', 'Accesorios y complementos'),
        ('Alimentos', 'Alimentos para mascotas'),
        ('Salud', 'Productos de salud y medicina'),
        ('Higiene', 'Productos de higiene')
    ]
    
    for nombre, descripcion in categorias_productos:
        Categoria.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
    
    # Categor√≠as de servicios de peluquer√≠a
    categorias_peluqueria = [
        ('Ba√±o y Secado', 'Servicios de ba√±o y secado profesional'),
        ('Corte y Estilismo', 'Servicios de corte y estilismo'),
        ('Cuidado de U√±as', 'Corte y cuidado de u√±as'),
        ('Limpieza', 'Servicios de limpieza especializada'),
        ('Paquetes', 'Paquetes completos de servicios')
    ]
    
    for nombre, descripcion in categorias_peluqueria:
        CategoriaServicioPeluqueria.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
    
    # Categor√≠as de farmacia
    categorias_farmacia = [
        ('Antibi√≥ticos', 'Medicamentos antibi√≥ticos'),
        ('Suplementos', 'Vitaminas y suplementos'),
        ('Antiinflamatorios', 'Medicamentos antiinflamatorios'),
        ('Antiparasitarios', 'Medicamentos antiparasitarios'),
        ('Dermatol√≥gicos', 'Medicamentos para la piel')
    ]
    
    for nombre, descripcion in categorias_farmacia:
        CategoriaFarmacia.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
    
    print("‚úÖ Categor√≠as creadas")

def crear_productos_reales():
    """Crear productos exactos de la base de datos local"""
    from veterinaria.models import Producto, Categoria
    
    print("üõí Creando productos reales...")
    
    # Productos reales de tu base de datos
    productos_data = [
        ('N√≥made Adulto Razas Medianas y Grandes 20 kg', 'Alimento premium para perros adultos de razas medianas y grandes', '28990.00', 'Comida para perros', 50),
        ('Pelota porfiada para gatos', 'Juguete interactivo para gatos', '2490.00', 'Juguetes', 15),
        ('Shampoo Hipoalerg√©nico Premium', 'Shampoo especial para pieles sensibles', '12500.00', 'Cuidado', 29),
        ('Collar GPS Inteligente', 'Collar con GPS para seguimiento de mascotas', '89990.00', 'Accesorios', 8),
        ('Cama Ortop√©dica para Perros', 'Cama ortop√©dica para el descanso de perros', '45990.00', 'Accesorios', 12),
        ('PURINA¬Æ DENTALIFE¬Æ snacks de salm√≥n para gatos', 'Snacks dentales para gatos sabor salm√≥n', '3990.00', 'Alimentos', 40),
        ('Royal Canin Adult', 'Alimento premium para perros adultos', '25990.00', 'Alimentos', 50),
        ('Whiskas Gatitos', 'Alimento h√∫medo para gatitos', '1890.00', 'Alimentos', 100),
        ('Pelota Kong Classic', 'Juguete resistente para perros', '8990.00', 'Juguetes', 30),
        ('Collar Antipulgas', 'Collar antipulgas de larga duraci√≥n', '12990.00', 'Salud', 25),
        ('Shampoo Canino', 'Shampoo especial para perros', '6990.00', 'Higiene', 40)
    ]
    
    for nombre, descripcion, precio, categoria_nombre, stock in productos_data:
        try:
            categoria = Categoria.objects.get(nombre=categoria_nombre)
            if not Producto.objects.filter(nombre=nombre).exists():
                Producto.objects.create(
                    nombre=nombre,
                    descripcion=descripcion,
                    precio=Decimal(precio),
                    categoria=categoria,
                    stock=stock,
                    es_destacado=False
                )
                print(f"  ‚úÖ {nombre}")
        except Categoria.DoesNotExist:
            print(f"  ‚ö†Ô∏è Categor√≠a {categoria_nombre} no encontrada para {nombre}")

def crear_servicios_peluqueria_reales():
    """Crear servicios de peluquer√≠a exactos"""
    from veterinaria.models import ServicioPeluqueria, CategoriaServicioPeluqueria
    
    print("‚úÇÔ∏è Creando servicios de peluquer√≠a reales...")
    
    # Servicios reales de tu base de datos
    servicios_data = [
        ('Ba√±o B√°sico', 'Ba√±o b√°sico con shampoo est√°ndar', '15000.00', 45, 'Ba√±o y Secado', 'Ba√±o con shampoo, secado b√°sico'),
        ('Ba√±o Completo', 'Ba√±o completo con productos premium', '15000.00', 60, 'Ba√±o y Secado', 'Ba√±o completo, secado y cepillado'),
        ('Ba√±o Medicado', 'Ba√±o con shampoo medicado especial', '30000.00', 75, 'Ba√±o y Secado', 'Ba√±o medicado para pieles sensibles'),
        ('Ba√±o Premium', 'Ba√±o premium con productos de lujo', '25000.00', 60, 'Ba√±o y Secado', 'Ba√±o premium con productos de alta gama'),
        ('Corte Creativo', 'Corte creativo y estilismo avanzado', '40000.00', 120, 'Corte y Estilismo', 'Corte creativo seg√∫n preferencias'),
        ('Hidrataci√≥n Profunda', 'Tratamiento de hidrataci√≥n profunda', '35000.00', 90, 'Cuidado de U√±as', 'Tratamiento hidratante intensivo'),
        ('Tratamiento Antipulgas', 'Tratamiento especializado antipulgas', '20000.00', 60, 'Limpieza', 'Tratamiento contra pulgas y par√°sitos'),
        ('Paquete B√°sico', 'Paquete b√°sico de servicios', '35000.00', 90, 'Paquetes', 'Ba√±o + corte b√°sico'),
        ('Paquete Premium', 'Paquete premium completo', '60000.00', 150, 'Paquetes', 'Servicios premium completos'),
        ('Paquete VIP', 'Paquete VIP con todos los servicios', '80000.00', 180, 'Paquetes', 'Todos los servicios incluidos'),
        ('Limpieza de O√≠dos', 'Limpieza profunda de o√≠dos', '10000.00', 30, 'Limpieza', 'Limpieza especializada de o√≠dos'),
        ('Paquete Completo', 'Paquete completo de servicios', '45000.00', 180, 'Paquetes', 'Ba√±o, corte, u√±as y limpieza completa')
    ]
    
    for nombre, descripcion, precio, duracion, categoria_nombre, incluye in servicios_data:
        try:
            categoria = CategoriaServicioPeluqueria.objects.get(nombre=categoria_nombre)
            if not ServicioPeluqueria.objects.filter(nombre=nombre).exists():
                ServicioPeluqueria.objects.create(
                    nombre=nombre,
                    descripcion=descripcion,
                    precio_base=Decimal(precio),
                    duracion_estimada=duracion,
                    categoria=categoria,
                    tipo_mascota='ambos',
                    tama√±o_mascota='todos',
                    incluye=incluye,
                    recomendaciones='',
                    activo=True
                )
                print(f"  ‚úÖ {nombre}")
        except CategoriaServicioPeluqueria.DoesNotExist:
            print(f"  ‚ö†Ô∏è Categor√≠a {categoria_nombre} no encontrada para {nombre}")

def crear_mascotas_reales():
    """Crear mascotas de ejemplo"""
    from veterinaria.models import Mascota, User
    
    print("üêï Creando mascotas de ejemplo...")
    
    try:
        cliente = User.objects.get(username='cliente1')
        
        mascotas_data = [
            (1, 'Max', 'Perro', 'Golden Retriever', 'Dorado', 'Normal', '3 a√±os', 'Macho'),
            (2, 'Luna', 'Gato', 'Persa', 'Blanco', 'Normal', '2 a√±os', 'Hembra'),
            (3, 'Rocky', 'Perro', 'Bulldog', 'Marr√≥n', 'Normal', '4 a√±os', 'Macho'),
            (4, 'Mia', 'Gato', 'Siam√©s', 'Crema', 'Normal', '1 a√±o', 'Hembra')
        ]
        
        for id_mascota, nombre, especie, raza, color, condicion, edad, sexo in mascotas_data:
            if not Mascota.objects.filter(id=id_mascota).exists():
                Mascota.objects.create(
                    id=id_mascota,
                    nombre=nombre,
                    especie=especie,
                    raza=raza,
                    color=color,
                    condicion=condicion,
                    edad=edad,
                    sexo=sexo,
                    propietario=cliente
                )
                print(f"  ‚úÖ {nombre} ({especie})")
                
    except User.DoesNotExist:
        print("  ‚ö†Ô∏è Cliente no encontrado, saltando creaci√≥n de mascotas")

def main():
    """Funci√≥n principal"""
    print("üêæ Configurando Sistema Veterinario Mascota Feliz con DATOS REALES...")
    print("=" * 70)
    
    # Configurar Django
    setup_django()
    
    try:
        # Aplicar migraciones
        print("üìã 1. Aplicando migraciones...")
        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migraciones aplicadas\n")
        
        # Crear datos reales
        crear_categorias_reales()
        crear_usuarios_reales()
        crear_productos_reales()
        crear_servicios_peluqueria_reales()
        crear_mascotas_reales()
        
        print("\nüéâ ¬°Configuraci√≥n completada con DATOS REALES!")
        print("=" * 70)
        print("üöÄ Para iniciar el servidor ejecuta: python manage.py runserver")
        print("üåê Luego visita: http://127.0.0.1:8000/")
        print("\nüë• Usuarios disponibles:")
        print("   üîë admin / admin123 (Administrador)")
        print("   üë®‚Äç‚öïÔ∏è dr_martinez / vet123 (Dr. Carlos Mart√≠nez)")
        print("   üë®‚Äç‚öïÔ∏è dra_rodriguez / vet123 (Dra. Mar√≠a Rodr√≠guez)")
        print("   üë®‚Äç‚öïÔ∏è dr_gonzalez / vet123 (Dr. Pedro Gonz√°lez)")
        print("   üë®‚Äç‚öïÔ∏è dra_lopez / vet123 (Dra. Ana L√≥pez)")
        print("   üë®‚Äç‚öïÔ∏è dr_silva / vet123 (Dr. Roberto Silva)")
        print("   üë®‚Äç‚öïÔ∏è veterinario1 / vet123 (Dr. Carlos Mendoza)")
        print("   ‚úÇÔ∏è peluquero1 / peluquero123 (Mar√≠a Gonz√°lez)")
        print("   ‚úÇÔ∏è peluquero2 / peluquero123 (Carlos Rodr√≠guez)")
        print("   ‚úÇÔ∏è peluquero3 / peluquero123 (Ana Mart√≠nez)")
        print("   üíä farmaceutico1 / farm123 (Mar√≠a Gonz√°lez)")
        print("   üë§ cliente1 / cliente123 (Cliente con mascotas)")
        
    except Exception as e:
        print(f"‚ùå Error durante la configuraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == '__main__':
    main() 