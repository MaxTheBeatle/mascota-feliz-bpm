#!/usr/bin/env python
"""
Script para crear datos de ejemplo del sistema Mascota Feliz
Incluye Max Guzman con sus mascotas espec√≠ficas: Nacho (gato) y Polo (perro)
"""

import os
import sys
import django
from datetime import date, timedelta, datetime
from decimal import Decimal
from io import BytesIO
from django.core.files.base import ContentFile

def setup_django():
    """Configurar Django"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mascota_feliz.settings')
    django.setup()

def crear_superuser():
    """Crear superusuario si no existe"""
    from django.contrib.auth import get_user_model
    
    User = get_user_model()
    
    if not User.objects.filter(username='admin').exists():
        User.objects.create_superuser(
            username='admin',
            email='admin@mascotafeliz.com',
            password='admin123',
            first_name='Administrador',
            last_name='Sistema',
            region='Regi√≥n Metropolitana',
            phone='+56912345678'
        )
        print("‚úÖ Superusuario 'admin' creado")
    else:
        print("‚ÑπÔ∏è Superusuario 'admin' ya existe")

def crear_usuarios_completos():
    """Crear todos los usuarios del sistema incluyendo Max Guzman"""
    from veterinaria.models import User, Veterinario, Peluquero, Farmaceutico
    
    print("üë• Creando usuarios del sistema...")
    
    # Max Guzman - Cliente principal
    if not User.objects.filter(username='cliente1').exists():
        User.objects.create_user(
            username='cliente1',
            email='max.guzman@example.com',
            password='cliente123',
            first_name='Max',
            last_name='Guzman',
            region='Regi√≥n Metropolitana',
            phone='+56912345678'
        )
        print("‚úÖ Max Guzman (cliente1) creado")
    else:
        # Actualizar datos existentes
        cliente1 = User.objects.get(username='cliente1')
        cliente1.first_name = 'Max'
        cliente1.last_name = 'Guzman'
        cliente1.email = 'max.guzman@example.com'
        cliente1.region = 'Regi√≥n Metropolitana'
        cliente1.save()
        print("‚úÖ Max Guzman (cliente1) actualizado")

    # Clientes adicionales
    clientes_data = [
        ('cliente2', 'ana.martinez@example.com', 'Ana', 'Mart√≠nez', 'Regi√≥n de Valpara√≠so'),
        ('cliente3', 'carlos.lopez@example.com', 'Carlos', 'L√≥pez', 'Regi√≥n del Biob√≠o'),
        ('cliente4', 'maria.gonzalez@example.com', 'Mar√≠a', 'Gonz√°lez', 'Regi√≥n de Los Lagos'),
        ('cliente5', 'pedro.rodriguez@example.com', 'Pedro', 'Rodr√≠guez', 'Regi√≥n de Coquimbo'),
        ('cliente6', 'laura.fernandez@example.com', 'Laura', 'Fern√°ndez', 'Regi√≥n de La Araucan√≠a'),
        ('cliente7', 'jose.silva@example.com', 'Jos√©', 'Silva', 'Regi√≥n de Antofagasta'),
        ('cliente8', 'sofia.torres@example.com', 'Sof√≠a', 'Torres', 'Regi√≥n de Atacama'),
        ('cliente9', 'diego.morales@example.com', 'Diego', 'Morales', 'Regi√≥n de Tarapac√°'),
    ]
    
    for username, email, first_name, last_name, region in clientes_data:
        if not User.objects.filter(username=username).exists():
            User.objects.create_user(
                username=username,
                email=email,
                password='cliente123',
                first_name=first_name,
                last_name=last_name,
                region=region,
                phone='+56987654321'
            )
            print(f"‚úÖ Cliente {username} ({first_name} {last_name}) creado")

    # Veterinarios
    veterinarios_data = [
        ('veterinario1', 'carlos.mendoza@mascotafeliz.cl', 'Carlos', 'Mendoza', 'Medicina General', '+56912345678'),
        ('veterinario2', 'maria.rodriguez@mascotafeliz.cl', 'Mar√≠a', 'Rodr√≠guez', 'Cirug√≠a Veterinaria', '+56987654321'),
        ('veterinario3', 'pedro.gonzalez@mascotafeliz.cl', 'Pedro', 'Gonz√°lez', 'Dermatolog√≠a Veterinaria', '+56976543210'),
    ]
    
    for username, email, first_name, last_name, especialidad, telefono in veterinarios_data:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username,
                email=email,
                password='vet123',
                first_name=first_name,
                last_name=last_name,
                is_staff=True,
                region='Regi√≥n Metropolitana',
                phone=telefono
            )
            
            Veterinario.objects.create(
                user=user,
                especialidad=especialidad,
                telefono=telefono
            )
            print(f"‚úÖ Veterinario {username} ({first_name} {last_name}) creado")

    # Peluqueros
    peluqueros_data = [
        ('peluquero1', 'maria.peluquera@mascotafeliz.cl', 'Mar√≠a', 'Estilista', '+56965432109', 8),
        ('peluquero2', 'carlos.peluquero@mascotafeliz.cl', 'Carlos', 'Cort√©s', '+56954321098', 5),
        ('peluquero3', 'ana.groomer@mascotafeliz.cl', 'Ana', 'Belleza', '+56943210987', 12)
    ]
    
    for username, email, first_name, last_name, telefono, experiencia in peluqueros_data:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username,
                email=email,
                password='peluquero123',
                first_name=first_name,
                last_name=last_name,
                region='Regi√≥n Metropolitana',
                phone=telefono
            )
            
            Peluquero.objects.create(
                user=user,
                telefono=telefono,
                experiencia_a√±os=experiencia
            )
            print(f"‚úÖ Peluquero {username} ({first_name} {last_name}) creado")

    # Farmac√©uticos
    farmaceuticos_data = [
        ('farmaceutico1', 'lucia.farmacia@mascotafeliz.cl', 'Luc√≠a', 'Medicamentos', '+56932109876', 'FARM001'),
        ('farmaceutico2', 'roberto.farmacia@mascotafeliz.cl', 'Roberto', 'Recetas', '+56921098765', 'FARM002'),
    ]
    
    for username, email, first_name, last_name, telefono, registro in farmaceuticos_data:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username,
                email=email,
                password='farm123',
                first_name=first_name,
                last_name=last_name,
                region='Regi√≥n Metropolitana',
                phone=telefono
            )
            
            Farmaceutico.objects.create(
                user=user,
                telefono=telefono,
                numero_registro=registro,
                especialidad='Farmacia Veterinaria',
                experiencia_a√±os=6
            )
            print(f"‚úÖ Farmac√©utico {username} ({first_name} {last_name}) creado")

def crear_categorias():
    """Crear todas las categor√≠as del sistema"""
    from veterinaria.models import Categoria, CategoriaServicioPeluqueria, CategoriaFarmacia
    
    print("üìÇ Creando categor√≠as...")
    
    # Categor√≠as de productos
    categorias_productos = [
        ('Alimentos', 'Alimentos para mascotas'),
        ('Juguetes', 'Juguetes y entretenimiento'),
        ('Cuidado', 'Productos de cuidado e higiene'),
        ('Accesorios', 'Accesorios y complementos'),
        ('Salud', 'Productos de salud y medicina'),
    ]
    
    for nombre, descripcion in categorias_productos:
        Categoria.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
    
    # Categor√≠as de servicios de peluquer√≠a
    categorias_peluqueria = [
        ('Ba√±o y Secado', 'Servicios de ba√±o y secado profesional'),
        ('Corte y Estilismo', 'Servicios de corte y estilismo'),
        ('Cuidado de U√±as', 'Corte y cuidado de u√±as'),
        ('Limpieza', 'Servicios de limpieza especializada'),
        ('Paquetes', 'Paquetes completos de servicios')
    ]
    
    for nombre, descripcion in categorias_peluqueria:
        CategoriaServicioPeluqueria.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion, 'activo': True}
        )
    
    # Categor√≠as de farmacia
    categorias_farmacia = [
        ('Antibi√≥ticos', 'Medicamentos antibi√≥ticos'),
        ('Suplementos', 'Vitaminas y suplementos'),
        ('Antiinflamatorios', 'Medicamentos antiinflamatorios'),
        ('Antiparasitarios', 'Medicamentos antiparasitarios'),
        ('Dermatol√≥gicos', 'Medicamentos para la piel')
    ]
    
    for nombre, descripcion in categorias_farmacia:
        CategoriaFarmacia.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
    
    print("‚úÖ Categor√≠as creadas")

def crear_productos():
    """Crear productos de la tienda"""
    from veterinaria.models import Producto, Categoria
    
    print("üõí Creando productos...")
    
    productos_data = [
        ('Royal Canin Adult', 'Alimento premium para perros adultos', '25990', 'Alimentos', True),
        ('Whiskas Gatitos', 'Alimento h√∫medo para gatitos', '1890', 'Alimentos', False),
        ('Pelota Kong Classic', 'Juguete resistente para perros', '8990', 'Juguetes', True),
        ('Rascador para Gatos', 'Torre rascadora con juguetes', '15990', 'Juguetes', False),
        ('Shampoo Hipoalerg√©nico', 'Shampoo especial para pieles sensibles', '12500', 'Cuidado', True),
        ('Collar GPS Inteligente', 'Collar con GPS para seguimiento', '89990', 'Accesorios', True),
        ('Cama Ortop√©dica', 'Cama ortop√©dica para perros grandes', '45990', 'Accesorios', False),
        ('Snacks Dentales', 'Snacks para limpieza dental', '3990', 'Salud', False),
        ('Vitaminas para Cachorros', 'Suplemento vitam√≠nico completo', '18990', 'Salud', False),
        ('Transportadora Premium', 'Transportadora para viajes seguros', '35990', 'Accesorios', False),
        ('Alimento Gatos Senior', 'Alimento especializado para gatos mayores', '22990', 'Alimentos', False),
    ]
    
    for nombre, descripcion, precio, categoria_nombre, destacado in productos_data:
        try:
            categoria = Categoria.objects.get(nombre=categoria_nombre)
            producto, created = Producto.objects.get_or_create(
                nombre=nombre,
                defaults={
                    'categoria': categoria,
                    'descripcion': descripcion,
                    'precio': Decimal(precio),
                    'stock': 50,
                    'es_destacado': destacado
                }
            )
            if created:
                print(f"  ‚úÖ {nombre}")
        except Categoria.DoesNotExist:
            print(f"  ‚ö†Ô∏è Categor√≠a {categoria_nombre} no encontrada para {nombre}")

def crear_medicamentos():
    """Crear medicamentos de farmacia"""
    from veterinaria.models import Medicamento, CategoriaFarmacia
    
    print("üíä Creando medicamentos...")
    
    medicamentos_data = [
        ('Amoxicilina 250mg', 'Antibi√≥ticos', 'antibiotico', 'tableta', '250mg', 'LabVet', 'Antibi√≥tico de amplio espectro', '8990', True),
        ('Meloxicam 5mg', 'Antiinflamatorios', 'antiinflamatorio', 'tableta', '5mg', 'PetPharma', 'Antiinflamatorio no esteroidal', '12500', True),
        ('Ivermectina 1%', 'Antiparasitarios', 'antiparasitario', 'inyectable', '1%', 'AnimalHealth', 'Antiparasitario interno y externo', '15990', True),
        ('Vitamina B Complex', 'Suplementos', 'vitamina', 'jarabe', '100ml', 'VitaPet', 'Complejo vitam√≠nico B', '9990', False),
        ('Shampoo Medicado', 'Dermatol√≥gicos', 'dermatologico', 'suspension', '250ml', 'DermaPet', 'Shampoo para dermatitis', '18990', False),
        ('Dipirona 500mg', 'Antiinflamatorios', 'analgesico', 'tableta', '500mg', 'PainFree', 'Analg√©sico y antipir√©tico', '6990', False),
        ('Drontal Plus', 'Antiparasitarios', 'desparasitante', 'tableta', '1 tab', 'Bayer', 'Desparasitante interno', '4990', False),
        ('Suero Fisiol√≥gico', 'Suplementos', 'otro', 'inyectable', '500ml', 'MedVet', 'Soluci√≥n salina est√©ril', '3990', False),
        ('Gentamicina Gotas', 'Antibi√≥ticos', 'oftalmico', 'gotas', '10ml', 'EyeCare', 'Antibi√≥tico oft√°lmico', '11990', True),
        ('Cortisona Crema', 'Dermatol√≥gicos', 'dermatologico', 'crema', '30g', 'SkinVet', 'Antiinflamatorio t√≥pico', '14990', False),
        ('Vacuna Antirr√°bica', 'Suplementos', 'vacuna', 'inyectable', '1 dosis', 'VaccPet', 'Vacuna contra la rabia', '25990', True),
        ('Omeprazol 20mg', 'Suplementos', 'digestivo', 'capsula', '20mg', 'GastroPet', 'Protector g√°strico', '16990', False),
        ('Furosemida 40mg', 'Suplementos', 'cardiaco', 'tableta', '40mg', 'CardioVet', 'Diur√©tico para problemas card√≠acos', '13990', True),
        ('Colirio Lubricante', 'Suplementos', 'oftalmico', 'gotas', '15ml', 'EyeComfort', 'Lubricante ocular', '8990', False),
    ]
    
    for nombre, categoria_nombre, tipo, presentacion, concentracion, laboratorio, descripcion, precio, requiere_receta in medicamentos_data:
        try:
            categoria = CategoriaFarmacia.objects.get(nombre=categoria_nombre)
            medicamento, created = Medicamento.objects.get_or_create(
                nombre=nombre,
                defaults={
                    'categoria': categoria,
                    'tipo': tipo,
                    'presentacion': presentacion,
                    'concentracion': concentracion,
                    'laboratorio': laboratorio,
                    'descripcion': descripcion,
                    'indicaciones': f'Indicaciones para {nombre}',
                    'dosis_recomendada': 'Seg√∫n prescripci√≥n veterinaria',
                    'precio': Decimal(precio),
                    'stock': 25,
                    'requiere_receta': requiere_receta,
                    'activo': True
                }
            )
            if created:
                print(f"  ‚úÖ {nombre}")
        except CategoriaFarmacia.DoesNotExist:
            print(f"  ‚ö†Ô∏è Categor√≠a {categoria_nombre} no encontrada para {nombre}")

def crear_servicios_peluqueria():
    """Crear servicios de peluquer√≠a"""
    from veterinaria.models import ServicioPeluqueria, CategoriaServicioPeluqueria
    
    print("‚úÇÔ∏è Creando servicios de peluquer√≠a...")
    
    servicios_data = [
        ('Ba√±o Completo', 'Ba√±o y Secado', 'Ba√±o con shampoo especializado y secado', '15000', 60, 'ambos'),
        ('Corte de Pelo B√°sico', 'Corte y Estilismo', 'Corte b√°sico de mantenimiento', '20000', 45, 'ambos'),
        ('Corte de U√±as', 'Cuidado de U√±as', 'Corte profesional de u√±as', '8000', 20, 'ambos'),
        ('Limpieza de O√≠dos', 'Limpieza', 'Limpieza profunda de o√≠dos', '10000', 25, 'ambos'),
        ('Paquete Completo', 'Paquetes', 'Ba√±o, corte, u√±as y limpieza de o√≠dos', '45000', 120, 'ambos'),
        ('Corte Estilo Poodle', 'Corte y Estilismo', 'Corte estilo poodle profesional', '35000', 90, 'perro'),
        ('Ba√±o Medicado', 'Ba√±o y Secado', 'Ba√±o con shampoo medicado especial', '25000', 75, 'ambos'),
        ('Desenredado Profundo', 'Cuidado', 'Desenredado para pelo largo y enredado', '30000', 60, 'ambos'),
        ('Corte Higi√©nico', 'Corte y Estilismo', 'Corte en zonas √≠ntimas e higi√©nicas', '12000', 30, 'ambos'),
        ('Limpieza Dental', 'Limpieza', 'Limpieza b√°sica de dientes', '15000', 35, 'ambos'),
        ('Pedicure Completo', 'Cuidado de U√±as', 'Corte de u√±as y limado', '12000', 30, 'ambos'),
        ('Ba√±o Anti-Pulgas', 'Ba√±o y Secado', 'Ba√±o especializado anti-pulgas', '20000', 70, 'ambos'),
        ('Corte de Verano', 'Corte y Estilismo', 'Corte corto para √©poca de calor', '18000', 50, 'perro'),
        ('Spa Relajante', 'Paquetes', 'Tratamiento spa completo', '60000', 150, 'ambos'),
        ('Limpieza de Gl√°ndulas', 'Limpieza', 'Limpieza de gl√°ndulas anales', '18000', 25, 'perro'),
        ('Corte Felino Especial', 'Corte y Estilismo', 'Corte especializado para gatos', '25000', 60, 'gato'),
        ('Tratamiento Antipulgas', 'Limpieza', 'Aplicaci√≥n de tratamiento antipulgas', '22000', 40, 'ambos'),
        ('Paquete Premium', 'Paquetes', 'Servicio premium con todos los tratamientos', '80000', 180, 'ambos'),
    ]
    
    for nombre, categoria_nombre, descripcion, precio, duracion, tipo_mascota in servicios_data:
        try:
            categoria = CategoriaServicioPeluqueria.objects.get(nombre=categoria_nombre)
            servicio, created = ServicioPeluqueria.objects.get_or_create(
                nombre=nombre,
                defaults={
                    'categoria': categoria,
                    'descripcion': descripcion,
                    'precio_base': Decimal(precio),
                    'duracion_estimada': duracion,
                    'tipo_mascota': tipo_mascota,
                    'tama√±o_mascota': 'todos',
                    'incluye': f'Incluye {nombre.lower()}',
                    'activo': True
                }
            )
            if created:
                print(f"  ‚úÖ {nombre}")
        except CategoriaServicioPeluqueria.DoesNotExist:
            print(f"  ‚ö†Ô∏è Categor√≠a {categoria_nombre} no encontrada para {nombre}")

def crear_mascotas_max_guzman():
    """Crear las mascotas espec√≠ficas de Max Guzman"""
    from veterinaria.models import Mascota, Pet, User
    
    print("üêï Creando mascotas de Max Guzman...")
    
    try:
        max_guzman = User.objects.get(username='cliente1')
        
        # Eliminar mascotas existentes del cliente1
        Mascota.objects.filter(propietario=max_guzman).delete()
        Pet.objects.filter(owner=max_guzman).delete()
        
        # Crear las dos mascotas espec√≠ficas
        mascotas_data = [
            (1, 'Nacho', 'Gato', 'Mestizo', 'Naranja', 'Normal', '2 a√±os', 'Macho'),
            (2, 'Polo', 'Perro', 'Labrador', 'Negro', 'Normal', '3 a√±os', 'Macho')
        ]
        
        for id_mascota, nombre, especie, raza, color, condicion, edad, sexo in mascotas_data:
            # Crear Mascota
            mascota = Mascota.objects.create(
                id=id_mascota,
                nombre=nombre,
                especie=especie,
                raza=raza,
                color=color,
                condicion=condicion,
                edad=edad,
                sexo=sexo,
                propietario=max_guzman
            )
            
            # Crear Pet correspondiente
            Pet.objects.create(
                id=str(id_mascota),
                owner=max_guzman,
                name=nombre,
                species=especie,
                breed=raza,
                base_color=color,
                condition=condicion,
                age_years=int(edad.split()[0]) if edad.split()[0].isdigit() else 2,
                age_months=0,
                sex=sexo,
                service_history=[]
            )
            
            print(f"  ‚úÖ {nombre} ({especie}) creado")
            
    except User.DoesNotExist:
        print("  ‚ö†Ô∏è Max Guzman no encontrado")

def crear_mascotas_otros_clientes():
    """Crear mascotas para otros clientes"""
    from veterinaria.models import Mascota, Pet, User
    
    print("üêï Creando mascotas para otros clientes...")
    
    # Datos de mascotas para otros clientes
    mascotas_otros = [
        # Cliente2 - Ana Mart√≠nez
        (3, 'cliente2', 'Luna', 'Perro', 'Golden Retriever', 'Dorado', 'Normal', '4 a√±os', 'Hembra'),
        (4, 'cliente2', 'Simba', 'Gato', 'Persa', 'Blanco', 'Normal', '3 a√±os', 'Macho'),
        
        # Cliente3 - Carlos L√≥pez
        (5, 'cliente3', 'Rocky', 'Perro', 'Bulldog', 'Marr√≥n', 'Normal', '5 a√±os', 'Macho'),
        (6, 'cliente3', 'Mia', 'Gato', 'Siam√©s', 'Crema', 'Normal', '2 a√±os', 'Hembra'),
        
        # Cliente4 - Mar√≠a Gonz√°lez
        (7, 'cliente4', 'Max', 'Perro', 'Pastor Alem√°n', 'Negro y caf√©', 'Normal', '6 a√±os', 'Macho'),
        
        # Cliente5 - Pedro Rodr√≠guez
        (8, 'cliente5', 'Bella', 'Perro', 'Cocker Spaniel', 'Caf√©', 'Normal', '3 a√±os', 'Hembra'),
        (9, 'cliente5', 'Whiskers', 'Gato', 'Angora', 'Gris', 'Normal', '4 a√±os', 'Macho'),
        
        # Cliente6 - Laura Fern√°ndez
        (10, 'cliente6', 'Charlie', 'Perro', 'Beagle', 'Tricolor', 'Normal', '2 a√±os', 'Macho'),
        
        # Cliente7 - Jos√© Silva
        (11, 'cliente7', 'Daisy', 'Perro', 'Chihuahua', 'Blanco', 'Normal', '1 a√±o', 'Hembra'),
        (12, 'cliente7', 'Shadow', 'Gato', 'Negro Com√∫n', 'Negro', 'Normal', '5 a√±os', 'Macho'),
        
        # Cliente8 - Sof√≠a Torres
        (13, 'cliente8', 'Lola', 'Perro', 'Pug', 'Beige', 'Normal', '3 a√±os', 'Hembra'),
    ]
    
    for id_mascota, username, nombre, especie, raza, color, condicion, edad, sexo in mascotas_otros:
        try:
            propietario = User.objects.get(username=username)
            
            # Crear Mascota solo si no existe
            if not Mascota.objects.filter(id=id_mascota).exists():
                mascota = Mascota.objects.create(
                    id=id_mascota,
                    nombre=nombre,
                    especie=especie,
                    raza=raza,
                    color=color,
                    condicion=condicion,
                    edad=edad,
                    sexo=sexo,
                    propietario=propietario
                )
                
                # Crear Pet correspondiente
                Pet.objects.create(
                    id=str(id_mascota),
                    owner=propietario,
                    name=nombre,
                    species=especie,
                    breed=raza,
                    base_color=color,
                    condition=condicion,
                    age_years=int(edad.split()[0]) if edad.split()[0].isdigit() else 2,
                    age_months=0,
                    sex=sexo,
                    service_history=[]
                )
                
                print(f"  ‚úÖ {nombre} ({especie}) para {propietario.first_name}")
            
        except User.DoesNotExist:
            print(f"  ‚ö†Ô∏è Usuario {username} no encontrado")

def crear_citas_ejemplo():
    """Crear citas de ejemplo"""
    from veterinaria.models import Cita, Mascota, Veterinario, CitaPeluqueria, Peluquero
    
    print("üìÖ Creando citas de ejemplo...")
    
    # Citas veterinarias
    try:
        veterinario = Veterinario.objects.first()
        mascotas = Mascota.objects.all()[:8]  # Primeras 8 mascotas
        
        if veterinario and mascotas:
            citas_data = [
                (mascotas[0], date.today() + timedelta(days=3), '10:00', 'Control de rutina para Nacho'),
                (mascotas[1], date.today() + timedelta(days=5), '14:30', 'Vacunaci√≥n anual para Polo'),
                (mascotas[2], date.today() + timedelta(days=7), '09:15', 'Revisi√≥n general para Luna'),
                (mascotas[3], date.today() + timedelta(days=10), '16:00', 'Control dental para Simba'),
                (mascotas[4], date.today() + timedelta(days=12), '11:30', 'Chequeo de rutina para Rocky'),
                (mascotas[5], date.today() + timedelta(days=15), '15:45', 'Consulta por alergias para Mia'),
            ]
            
            for mascota, fecha, hora, motivo in citas_data:
                if not Cita.objects.filter(mascota=mascota, fecha=fecha, hora=hora).exists():
                    Cita.objects.create(
                        mascota=mascota,
                        veterinario=veterinario,
                        fecha=fecha,
                        hora=hora,
                        motivo=motivo,
                        estado='programada'
                    )
                    print(f"  ‚úÖ Cita para {mascota.nombre} - {fecha}")
    
    except Exception as e:
        print(f"  ‚ö†Ô∏è Error creando citas veterinarias: {e}")
    
    # Citas de peluquer√≠a
    try:
        peluquero = Peluquero.objects.first()
        if peluquero and mascotas:
            citas_peluqueria = [
                (mascotas[0], date.today() + timedelta(days=8), '10:00', '25000'),  # Nacho
                (mascotas[1], date.today() + timedelta(days=14), '14:00', '35000'), # Polo
                (mascotas[2], date.today() + timedelta(days=20), '11:30', '30000'), # Luna
            ]
            
            for mascota, fecha, hora, total in citas_peluqueria:
                if not CitaPeluqueria.objects.filter(mascota=mascota, fecha=fecha, hora=hora).exists():
                    CitaPeluqueria.objects.create(
                        cliente=mascota.propietario,
                        mascota=mascota,
                        peluquero=peluquero,
                        fecha=fecha,
                        hora=hora,
                        estado='programada',
                        total=Decimal(total),
                        telefono_contacto=mascota.propietario.phone or '+56912345678'
                    )
                    print(f"  ‚úÖ Cita peluquer√≠a para {mascota.nombre} - {fecha}")
    
    except Exception as e:
        print(f"  ‚ö†Ô∏è Error creando citas de peluquer√≠a: {e}")

def main():
    """Funci√≥n principal"""
    print("üêæ CONFIGURANDO SISTEMA MASCOTA FELIZ")
    print("=" * 60)
    print("üë§ Incluye: Max Guzman con Nacho (gato) y Polo (perro)")
    print("=" * 60)
    
    # Configurar Django
    setup_django()
    
    try:
        # Aplicar migraciones
        print("\nüìã 1. Aplicando migraciones...")
        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migraciones aplicadas")
        
        # Crear datos
        print("\nüë• 2. Creando usuarios...")
        crear_superuser()
        crear_usuarios_completos()
        
        print("\nüìÇ 3. Creando categor√≠as...")
        crear_categorias()
        
        print("\nüõí 4. Creando productos...")
        crear_productos()
        
        print("\nüíä 5. Creando medicamentos...")
        crear_medicamentos()
        
        print("\n‚úÇÔ∏è 6. Creando servicios de peluquer√≠a...")
        crear_servicios_peluqueria()
        
        print("\nüêï 7. Creando mascotas...")
        crear_mascotas_max_guzman()
        crear_mascotas_otros_clientes()
        
        print("\nüìÖ 8. Creando citas...")
        crear_citas_ejemplo()
        
        print("\nüéâ ¬°CONFIGURACI√ìN COMPLETADA!")
        print("=" * 60)
        print("üöÄ Para iniciar: python manage.py runserver")
        print("üåê Visita: http://127.0.0.1:8000/")
        print("\nüë• USUARIOS PRINCIPALES:")
        print("   üîë admin / admin123 (Administrador)")
        print("   üë§ cliente1 / cliente123 (Max Guzman)")
        print("   üë®‚Äç‚öïÔ∏è veterinario1 / vet123 (Carlos Mendoza)")
        print("   ‚úÇÔ∏è peluquero1 / peluquero123 (Mar√≠a Estilista)")
        print("   üíä farmaceutico1 / farm123 (Luc√≠a Medicamentos)")
        
        print("\nüêæ MASCOTAS DE MAX GUZMAN:")
        print("   üê± Nacho (Gato Mestizo Naranja)")
        print("   üêï Polo (Perro Labrador Negro)")
        
        print("\nüìä RESUMEN DE DATOS:")
        from veterinaria.models import User, Mascota, Producto, Medicamento, ServicioPeluqueria, Cita
        print(f"   üë• Usuarios: {User.objects.count()}")
        print(f"   üêï Mascotas: {Mascota.objects.count()}")
        print(f"   üõí Productos: {Producto.objects.count()}")
        print(f"   üíä Medicamentos: {Medicamento.objects.count()}")
        print(f"   ‚úÇÔ∏è Servicios: {ServicioPeluqueria.objects.count()}")
        print(f"   üìÖ Citas: {Cita.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå Error durante la configuraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == '__main__':
    main() 